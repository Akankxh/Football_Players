{"ast":null,"code":"const API_BASE_URL = 'http://localhost:8080/api';\nclass ApiService {\n  constructor() {\n    // Stock endpoints\n    this.getAllStocks = () => this.request('/stocks/');\n    this.getWatchlist = () => this.request('/stocks/watchlist');\n    this.getBoughtStocks = () => this.request('/stocks/bought');\n    this.getWalletBalance = () => this.request('/stocks/wallet');\n    this.getCurrentPrice = symbol => this.request(`/stocks/current-price/${symbol}`);\n    this.getChartData = (symbol, period = '1d') => this.request(`/stocks/chart/${symbol}?period=${period}`);\n    // Updated recharge method to handle response properly\n    this.rechargeWallet = async amount => {\n      const response = await this.request(`/stocks/recharge?amount=${amount}`, {\n        method: 'POST'\n      });\n      return response;\n    };\n    // Updated buy/sell methods to handle responses\n    this.buyStock = async (ticker, units) => {\n      const response = await this.request(`/stocks/buy?ticker=${ticker}&units=${units}`, {\n        method: 'POST'\n      });\n      return response;\n    };\n    this.sellStock = async (ticker, units) => {\n      const response = await this.request(`/stocks/sell?ticker=${ticker}&units=${units}`, {\n        method: 'POST'\n      });\n      return response;\n    };\n    // Order endpoints\n    this.getOrderHistory = () => this.request('/orders/history');\n  }\n  async request(endpoint, options = {}) {\n    const url = `${API_BASE_URL}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    };\n    try {\n      const response = await fetch(url, config);\n\n      // Handle different response types\n      const contentType = response.headers.get('content-type');\n      let data;\n      if (contentType && contentType.includes('application/json')) {\n        data = await response.json();\n      } else {\n        data = await response.text();\n      }\n      if (!response.ok) {\n        // If it's a JSON error response, throw the error message\n        if (data && data.error) {\n          throw new Error(data.error);\n        }\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return data;\n    } catch (error) {\n      console.error(`API request failed: ${endpoint}`, error);\n      throw error;\n    }\n  }\n}\nexport const api = new ApiService();","map":{"version":3,"names":["API_BASE_URL","ApiService","constructor","getAllStocks","request","getWatchlist","getBoughtStocks","getWalletBalance","getCurrentPrice","symbol","getChartData","period","rechargeWallet","amount","response","method","buyStock","ticker","units","sellStock","getOrderHistory","endpoint","options","url","config","headers","fetch","contentType","get","data","includes","json","text","ok","error","Error","status","console","api"],"sources":["C:/Citi/trading-app/trading-app/src/services/api.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:8080/api';\r\n\r\nclass ApiService {\r\n  async request(endpoint, options = {}) {\r\n    const url = `${API_BASE_URL}${endpoint}`;\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...options.headers,\r\n      },\r\n      ...options,\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(url, config);\r\n      \r\n      // Handle different response types\r\n      const contentType = response.headers.get('content-type');\r\n      let data;\r\n      \r\n      if (contentType && contentType.includes('application/json')) {\r\n        data = await response.json();\r\n      } else {\r\n        data = await response.text();\r\n      }\r\n\r\n      if (!response.ok) {\r\n        // If it's a JSON error response, throw the error message\r\n        if (data && data.error) {\r\n          throw new Error(data.error);\r\n        }\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      \r\n      return data;\r\n    } catch (error) {\r\n      console.error(`API request failed: ${endpoint}`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Stock endpoints\r\n  getAllStocks = () => this.request('/stocks/');\r\n  getWatchlist = () => this.request('/stocks/watchlist');\r\n  getBoughtStocks = () => this.request('/stocks/bought');\r\n  getWalletBalance = () => this.request('/stocks/wallet');\r\n  getCurrentPrice = (symbol) => this.request(`/stocks/current-price/${symbol}`);\r\n  getChartData = (symbol, period = '1d') => this.request(`/stocks/chart/${symbol}?period=${period}`);\r\n  \r\n  // Updated recharge method to handle response properly\r\n  rechargeWallet = async (amount) => {\r\n    const response = await this.request(`/stocks/recharge?amount=${amount}`, { method: 'POST' });\r\n    return response;\r\n  };\r\n  \r\n  // Updated buy/sell methods to handle responses\r\n  buyStock = async (ticker, units) => {\r\n    const response = await this.request(`/stocks/buy?ticker=${ticker}&units=${units}`, { method: 'POST' });\r\n    return response;\r\n  };\r\n  \r\n  sellStock = async (ticker, units) => {\r\n    const response = await this.request(`/stocks/sell?ticker=${ticker}&units=${units}`, { method: 'POST' });\r\n    return response;\r\n  };\r\n  \r\n  // Order endpoints\r\n  getOrderHistory = () => this.request('/orders/history');\r\n}\r\n\r\nexport const api = new ApiService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}