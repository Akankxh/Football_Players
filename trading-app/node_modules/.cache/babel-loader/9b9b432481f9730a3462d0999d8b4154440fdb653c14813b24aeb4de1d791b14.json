{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { api } from '../services/api';\nexport const useWallet = () => {\n  _s();\n  const [balance, setBalance] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const fetchBalance = useCallback(async () => {\n    try {\n      setLoading(true);\n      const walletBalance = await api.getWalletBalance();\n      setBalance(walletBalance);\n    } catch (error) {\n      console.error('Error fetching wallet balance:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  const rechargeWallet = useCallback(async amount => {\n    try {\n      await api.rechargeWallet(amount);\n      await fetchBalance();\n    } catch (error) {\n      console.error('Error recharging wallet:', error);\n      throw error;\n    }\n  }, [fetchBalance]);\n  useEffect(() => {\n    fetchBalance();\n  }, [fetchBalance]);\n  return {\n    balance,\n    loading,\n    rechargeWallet,\n    refreshBalance: fetchBalance\n  };\n};\n_s(useWallet, \"BxwBXBax3fCZnrSb69zXh+EgYkk=\");","map":{"version":3,"names":["useState","useEffect","useCallback","api","useWallet","_s","balance","setBalance","loading","setLoading","fetchBalance","walletBalance","getWalletBalance","error","console","rechargeWallet","amount","refreshBalance"],"sources":["C:/Citi/trading-app/trading-app/src/hooks/useWallet.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\r\nimport { api } from '../services/api';\r\n\r\nexport const useWallet = () => {\r\n  const [balance, setBalance] = useState(0);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const fetchBalance = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      const walletBalance = await api.getWalletBalance();\r\n      setBalance(walletBalance);\r\n    } catch (error) {\r\n      console.error('Error fetching wallet balance:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const rechargeWallet = useCallback(async (amount) => {\r\n    try {\r\n      await api.rechargeWallet(amount);\r\n      await fetchBalance();\r\n    } catch (error) {\r\n      console.error('Error recharging wallet:', error);\r\n      throw error;\r\n    }\r\n  }, [fetchBalance]);\r\n\r\n  useEffect(() => {\r\n    fetchBalance();\r\n  }, [fetchBalance]);\r\n\r\n  return {\r\n    balance,\r\n    loading,\r\n    rechargeWallet,\r\n    refreshBalance: fetchBalance\r\n  };\r\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACxD,SAASC,GAAG,QAAQ,iBAAiB;AAErC,OAAO,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC;EACzC,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAE5C,MAAMU,YAAY,GAAGR,WAAW,CAAC,YAAY;IAC3C,IAAI;MACFO,UAAU,CAAC,IAAI,CAAC;MAChB,MAAME,aAAa,GAAG,MAAMR,GAAG,CAACS,gBAAgB,CAAC,CAAC;MAClDL,UAAU,CAACI,aAAa,CAAC;IAC3B,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACxD,CAAC,SAAS;MACRJ,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMM,cAAc,GAAGb,WAAW,CAAC,MAAOc,MAAM,IAAK;IACnD,IAAI;MACF,MAAMb,GAAG,CAACY,cAAc,CAACC,MAAM,CAAC;MAChC,MAAMN,YAAY,CAAC,CAAC;IACtB,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,MAAMA,KAAK;IACb;EACF,CAAC,EAAE,CAACH,YAAY,CAAC,CAAC;EAElBT,SAAS,CAAC,MAAM;IACdS,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,CAACA,YAAY,CAAC,CAAC;EAElB,OAAO;IACLJ,OAAO;IACPE,OAAO;IACPO,cAAc;IACdE,cAAc,EAAEP;EAClB,CAAC;AACH,CAAC;AAACL,EAAA,CApCWD,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}